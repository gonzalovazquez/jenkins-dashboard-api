{"version":3,"file":"jenkins-dashboard.service.js","sourceRoot":"","sources":["jenkins-dashboard.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA+B,eAAe,CAAC,CAAA;AAG/C,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,wCAAwC;AAGxC;IACI,iCAAoB,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;QAErB,eAAU,GAAG,2DAA2D,CAAC,CAAE,iBAAiB;IAFpE,CAAC;IAIjC,yCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;aACxB,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;IAEO,6CAAW,GAAnB,UAAoB,GAAa;QAC7B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAG,CAAC;IAC5B,CAAC;IAEO,6CAAW,GAAnB,UAAqB,KAAU;QAC/B,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QACtE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAzBN;QAAC,iBAAU,EAAE;;+BAAA;IA2Bb,8BAAC;AAAD,CAAC,AA1BD,IA0BC;AA1BY,+BAAuB,0BA0BnC,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\n\nimport { Job } from './job';\nimport { Observable } from 'rxjs/Observable';\n//import { JOBS } from './mock-jenkins';\n\n@Injectable()\nexport class JenkinsDashboardService {\n    constructor(private http:Http) {}\n    \n    private jenkinsURL = '/api/job/Core';  // URL to web API\n    \n    getJobs (): Observable<Job[]> {\n        return this.http.get(this.jenkinsURL)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n    }\n    \n    private extractData(res: Response) {\n        let body = res.json();\n        console.log(body);\n        return body.jobs || { };\n    }\n    \n    private handleError (error: any) {\n    // In a real world app, we might use a remote logging infrastructure\n    // We'd also dig deeper into the error to get a better message\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n     }\n  \n}\n"]}